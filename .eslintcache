[{"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/App.tsx":"1","/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/views/Main.tsx":"2","/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/views/FAQ.tsx":"3","/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/reportWebVitals.ts":"4","/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/index.tsx":"5","/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/views/Results.tsx":"6","/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/Apollo.tsx":"7","/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/Page.tsx":"8","/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/ButtonSpinner.tsx":"9"},{"size":1662,"mtime":1606620502966,"results":"10","hashOfConfig":"11"},{"size":5602,"mtime":1606618271664,"results":"12","hashOfConfig":"11"},{"size":123,"mtime":1606613297491,"results":"13","hashOfConfig":"11"},{"size":425,"mtime":1606601605790,"results":"14","hashOfConfig":"11"},{"size":583,"mtime":1606612282215,"results":"15","hashOfConfig":"11"},{"size":3318,"mtime":1606621877660,"results":"16","hashOfConfig":"11"},{"size":305,"mtime":1606614940466,"results":"17","hashOfConfig":"11"},{"size":255,"mtime":1606613109339,"results":"18","hashOfConfig":"11"},{"size":331,"mtime":1606617452228,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1m03scn",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/App.tsx",[],["42","43"],"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/views/Main.tsx",["44"],"import { Reducer, useEffect, useReducer, useRef } from \"react\";\nimport { ArrowRight, MinusCircle, Plus } from \"react-feather\";\nimport { useHistory } from \"react-router-dom\";\nimport { Page } from \"../Page\";\n\nimport { gql, useMutation } from \"@apollo/client\";\nimport { ButtonSpinner } from \"../ButtonSpinner\";\nimport { notification } from \"antd\";\n\ntype Action =\n  | { type: \"addSearch\" }\n  | { type: \"removeSearch\"; payload: { id: number } }\n  | { type: \"setSearch\"; payload: { id: number; value: string } };\n\ntype State = { searches: { id: number; value: string }[] };\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"addSearch\":\n      return {\n        ...state,\n        searches: state.searches.concat({\n          id: Date.now(),\n          value: \"\",\n        }),\n      };\n\n    case \"setSearch\":\n      return {\n        ...state,\n        searches: state.searches.map((s) =>\n          s.id === action.payload.id ? { ...s, value: action.payload.value } : s\n        ),\n      };\n\n    case \"removeSearch\":\n      return {\n        ...state,\n        searches: state.searches.filter((s) => s.id !== action.payload.id),\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst initialState: State = {\n  searches: [{ id: 0, value: \"\" }],\n};\n\nconst Input = (props: {\n  onChange: (v: string) => void;\n  value: string;\n  onEnter: () => void;\n}) => {\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (ref && ref.current) {\n      //@ts-ignore\n      ref.current.focus();\n    }\n  }, []);\n\n  return (\n    <input\n      ref={ref}\n      onKeyDown={(e) =>\n        //@ts-ignore\n        e.code === \"Enter\" ? props.onEnter() : null\n      }\n      value={props.value}\n      className=\"rounded-md border px-4 py-2 flex-1 items-center\"\n      placeholder=\"Wprowadź frazę do wyszukiwania\"\n      onChange={(e) => {\n        props.onChange(e.target.value);\n      }}\n    />\n  );\n};\n\ntype R = Reducer<State, Action>;\n\nconst GET_JOB = gql`\n  mutation StartCrawling(\n    $phrases: [String!]!\n    $operator: String!\n    $iterations: Int!\n    $emailEntityEnabled: Boolean!\n    $phoneNumberEntityEnabled: Boolean!\n    $bitcoinAddressEnabled: Boolean!\n    $ssnNumberEnabled: Boolean!\n    $creditCardEnabled: Boolean!\n  ) {\n    startCrawling(\n      phrases: $phrases\n      operator: $operator\n      iterations: $iterations\n      emailEntityEnabled: $emailEntityEnabled\n      phoneNumberEntityEnabled: $phoneNumberEntityEnabled\n      bitcoinAddressEnabled: $bitcoinAddressEnabled\n      ssnNumberEnabled: $ssnNumberEnabled\n      creditCardEnabled: $creditCardEnabled\n    )\n  }\n`;\n\nexport function Main() {\n  const [state, dispatch] = useReducer<R>(reducer, initialState);\n  const history = useHistory();\n  const [addJob, { data, loading }] = useMutation(GET_JOB);\n\n  return (\n    <Page title=\"Wyszukaj\">\n      <div className=\"w-full\">\n        <div className=\"flex flex-row w-full\">\n          <div className=\"flex  flex-col w-2/3\">\n            {state.searches.map((s) => (\n              <div key={s.id} className=\"mb-4 flex items-center\">\n                <Input\n                  value={s.value}\n                  onChange={(value) => {\n                    dispatch({\n                      type: \"setSearch\",\n                      payload: { id: s.id, value },\n                    });\n                  }}\n                  onEnter={() => dispatch({ type: \"addSearch\" })}\n                />\n                <div className=\"ml-2 w-6 h-6 flex items-center justify-center\">\n                  {s.id !== 0 && (\n                    <MinusCircle\n                      className=\"cursor-pointer\"\n                      color=\"red\"\n                      onClick={() =>\n                        dispatch({\n                          type: \"removeSearch\",\n                          payload: { id: s.id },\n                        })\n                      }\n                    />\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className=\"flex flex-1 items-center justify-center\">\n            <button\n              onClick={() => dispatch({ type: \"addSearch\" })}\n              className=\"px-6 py-2 rounded-full shadow-lg text-blue-400 font-extrabold flex items-center justify-center bg-blue-100 outline-none my-2 hover:bg-blue-400 hover:text-white transition-colors\"\n            >\n              <Plus size={24} />\n\n              <span className=\"pl-4\">Dodaj</span>\n            </button>\n          </div>\n        </div>\n        <div className=\"flex justify-center mt-4\">\n          <button\n            className=\"relative bg-blue-300 rounded-full px-6 py-2 text-white text-lg flex items-center font-medium shadow-md hover:bg-blue-400 transition-colors \"\n            onClick={() => {\n              addJob({\n                variables: {\n                  phrases: state.searches.map((s) => s.value),\n                  operator: \"AND\",\n                  iterations: 1,\n                  emailEntityEnabled: true,\n                  phoneNumberEntityEnabled: true,\n                  bitcoinAddressEnabled: true,\n                  ssnNumberEnabled: true,\n                  creditCardEnabled: true,\n                },\n              })\n                .then((res) => {\n                  history.push(`/results/${res?.data?.startCrawling}`);\n                })\n                .catch(() => notification.error({ message: \"Error occured\" }));\n            }}\n          >\n            <span className=\"pr-4\">Wyszukaj</span>\n            <ArrowRight />\n            <ButtonSpinner loading={loading} />\n          </button>\n        </div>\n      </div>\n    </Page>\n  );\n}\n","/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/views/FAQ.tsx",[],"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/reportWebVitals.ts",[],["45","46"],"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/index.tsx",[],"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/views/Results.tsx",[],"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/Apollo.tsx",[],["47","48"],"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/Page.tsx",[],"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/ButtonSpinner.tsx",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":111,"column":20,"nodeType":"55","messageId":"56","endLine":111,"endColumn":24},{"ruleId":"49","replacedBy":"57"},{"ruleId":"51","replacedBy":"58"},{"ruleId":"49","replacedBy":"59"},{"ruleId":"51","replacedBy":"60"},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"@typescript-eslint/no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar",["61"],["62"],["61"],["62"],"no-global-assign","no-unsafe-negation"]