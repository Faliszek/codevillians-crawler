[{"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/App.tsx":"1","/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/views/Main.tsx":"2","/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/views/FAQ.tsx":"3","/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/reportWebVitals.ts":"4","/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/index.tsx":"5","/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/views/Results.tsx":"6"},{"size":1633,"mtime":1606610450973,"results":"7","hashOfConfig":"8"},{"size":3808,"mtime":1606609728842,"results":"9","hashOfConfig":"8"},{"size":144,"mtime":1606605189103,"results":"10","hashOfConfig":"8"},{"size":425,"mtime":1606601605790,"results":"11","hashOfConfig":"8"},{"size":500,"mtime":1606601605788,"results":"12","hashOfConfig":"8"},{"size":1148,"mtime":1606610408136,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1m03scn",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/App.tsx",[],["29","30"],"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/views/Main.tsx",["31"],"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/views/FAQ.tsx",[],"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/reportWebVitals.ts",[],["32","33"],"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/index.tsx",[],"/Users/pawelfalisz/Documents/JS/codevillians-crawler/src/views/Results.tsx",["34","35"],"import { useState } from \"react\";\nimport { List, Share2 } from \"react-feather\";\n\nexport function Results() {\n  const [tab, setTab] = useState(\"list\");\n\n  return (\n    <div className=\"rounded-lg bg-white p-8 shadow-md border border-gray-100\">\n      <h1 className=\"text-2xl\">Wyniki wyszukiwania</h1>\n      <div className=\"flex py-4\">\n        <div\n          className={`cursor-pointer text-xl px-4 mb-4 w-48 flex items-center justify-center ${\n            tab === \"list\" ? \"text-blue-400\" : \"text-gray-600\"\n          }`}\n          onClick={() => setTab(\"list\")}\n        >\n          <List />\n\n          <span className=\"ml-8\">Tabela</span>\n        </div>\n        <div\n          className={` border-l cursor-pointer px-4 mb-4 text-xl w-48 flex items-center justify-center ${\n            tab === \"graph\" ? \"text-blue-400\" : \"text-gray-600\"\n          }`}\n          onClick={() => setTab(\"graph\")}\n        >\n          <Share2 />\n          <span className=\"ml-8\">Graf</span>\n        </div>\n      </div>\n\n      <div className=\"\">\n        {tab == \"list\" && <div>Tabela nested</div>}\n\n        {tab == \"graph\" && <div>Graf</div>}\n      </div>\n    </div>\n  );\n}\n",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":2,"column":41,"nodeType":"42","messageId":"43","endLine":2,"endColumn":47},{"ruleId":"36","replacedBy":"44"},{"ruleId":"38","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":33,"column":14,"nodeType":"48","messageId":"49","endLine":33,"endColumn":16},{"ruleId":"46","severity":1,"message":"47","line":35,"column":14,"nodeType":"48","messageId":"49","endLine":35,"endColumn":16},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"@typescript-eslint/no-unused-vars","'Search' is defined but never used.","Identifier","unusedVar",["50"],["51"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]